<?xml version="1.0" encoding="UTF-8"?>
<project>
  <!--(*
 *
 * File: MotionControl.xml
 *
 * IEC 61131-3 Structured Text (ST) code generated for subsystem "MotionControl/Path_signal_gen"
 *
 * Model name                      : MotionControl
 * Model version                   : 1.7
 * Model creator                   : Jakob
 * Model last modified by          : Jakob
 * Model last modified on          : Sun Feb 26 16:35:59 2023
 * Model sample time               : 0s
 * Subsystem name                  : MotionControl/Path_signal_gen
 * Subsystem sample time           : 0.4s
 * Simulink PLC Coder version      : 3.6 (R2022a) 13-Nov-2021
 * ST code generated on            : Sun Feb 26 16:45:07 2023
 *
 * Target IDE selection            : Beckhoff TwinCAT 3
 * Test Bench included             : No
 *
 *)
-->
  <fileHeader companyName="The Mathworks, Inc." companyURL="www.mathworks.com" contentDescription="" creationDateTime="2023-02-26T16:45:07" productName="Simulink PLC Coder" productRelease="(R2022a)" productVersion="3.6"/>
  <contentHeader name="MotionControl">
    <coordinateInfo>
      <fbd>
        <scaling x="0" y="0"/>
      </fbd>
      <ld>
        <scaling x="0" y="0"/>
      </ld>
      <sfc>
        <scaling x="0" y="0"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes/>
    <pous>
      <pou name="Path_signal_gen" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="x0">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="v_0">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="x_ref">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="v_ref">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="t0">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="tRamp">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="tWait">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="t">
              <type>
                <LREAL/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="x">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="v">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="Error">
              <type>
                <LREAL/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="Error_0">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="tHold">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="x1">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="x4">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="a_tmp">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="a_tmp_tmp">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="a_tmp_0">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="a_tmp_tmp_0">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="a_tmp_tmp_1">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="a_tmp_tmp_2">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="x1_tmp">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="x4_tmp">
              <type>
                <LREAL/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"><![CDATA[
(* MATLAB Function: '<Root>/Path_signal_gen' *)
(* MATLAB Function 'Path_signal_gen': '<S1>:1' *)
(* '<S1>:1:3' x_SetPoint = x_ref - x0; *)
(* '<S1>:1:4' vs = v_ref; *)
(* '<S1>:1:5' slopeExt = v_0-vs; *)
(* '<S1>:1:6' slopeRetr = -vs-v_0; *)
(* '<S1>:1:8' as = vs/tRamp; *)
(* Find acceleration *)
(* '<S1>:1:9' s_acc = (vs^2-v_0^2)/as; *)
(* Acceleration sp *)
(* '<S1>:1:11' tHold = (x_SetPoint-s_acc)/vs; *)
tHold := ((x_ref - x0) - (((v_ref * v_ref) - (v_0 * v_0)) / (v_ref / tRamp))) / v_ref;
(* '<S1>:1:13' if tHold < 0 *)

IF tHold < 0.0 THEN 
    (* '<S1>:1:14' Error = 1; *)
    Error_0 := 1;
ELSE 
    (* '<S1>:1:15' else *)
    (* '<S1>:1:16' Error = 0; *)
    Error_0 := 0;
END_IF;

(* '<S1>:1:19' t1 = tRamp; *)
(* '<S1>:1:20' t2 = tHold; *)
(* '<S1>:1:21' t3 = tRamp; *)
(* '<S1>:1:22' t4 = tWait; *)
(* '<S1>:1:23' t5 = t1; *)
(* '<S1>:1:24' t6 = t2; *)
(* '<S1>:1:25' t7 = t3; *)
(* Ramp Equations: *)
(* '<S1>:1:28' x1 = x0 + v_0*((t0+t1)-t0) - (slopeExt/t1)*((t0+t1)-t0)^2/2; *)
a_tmp_tmp := t0 + tRamp;
a_tmp := a_tmp_tmp - t0;
x1_tmp := (v_0 - v_ref) / tRamp;
x1 := ((a_tmp * v_0) + x0) - ((x1_tmp * (a_tmp * a_tmp)) / 2.0);
(* '<S1>:1:29' x2 = x1 + vs * ((t0+t1+t2)-(t0+t1)); *)
(* '<S1>:1:30' x4 = x_ref - v_0 * ((t0+t1+t2+t3+t4+t5)-(t0+t1+t2+t3+t4)) + (slopeRetr/t5)*((t0+t1+t2+t3+t4+t5)-(t0+t1+t2+t3+t4))^2/2; *)
a_tmp_tmp_0 := a_tmp_tmp + tHold;
a_tmp_tmp_1 := a_tmp_tmp_0 + tRamp;
a_tmp := a_tmp_tmp_1 + tWait;
a_tmp_tmp_2 := a_tmp + tRamp;
a_tmp_0 := a_tmp_tmp_2 - a_tmp;
x4_tmp := (( -v_ref) - v_0) / tRamp;
x4 := (x_ref - (a_tmp_0 * v_0)) + ((x4_tmp * (a_tmp_0 * a_tmp_0)) / 2.0);
(* '<S1>:1:31' x5 = x4 - vs*((t0+t1+t2+t3+t4+t5+t6)-(t0+t1+t2+t3+t4+t5)); *)
(* '<S1>:1:33' if Error == 1 *)

IF Error_0 = 1 THEN 
    (* Outport: '<Root>/x' *)
    (* '<S1>:1:34' x = x0; *)
    x := x0;
    (* Outport: '<Root>/v' *)
    (* '<S1>:1:35' v = v_0; *)
    v := v_0;
ELSIF (t >= 0.0) AND (t < t0) THEN 
    (* Outport: '<Root>/x' *)
    (* '<S1>:1:36' elseif t >= 0 && t<t0 *)
    (* '<S1>:1:37' x = x0; *)
    x := x0;
    (* Outport: '<Root>/v' *)
    (* '<S1>:1:38' v = v_0; *)
    v := v_0;
ELSIF (t >= t0) AND (t < a_tmp_tmp) THEN 
    (* '<S1>:1:39' elseif t >= t0 && t < (t0+t1) *)
    (* '<S1>:1:40' x = x0 + v_0*(t-t0) - (slopeExt/t1)*(t-t0)^2/2; *)
    a_tmp := t - t0;
    (* Outport: '<Root>/x' *)
    x := ((a_tmp * v_0) + x0) - ((x1_tmp * (a_tmp * a_tmp)) / 2.0);
    (* Outport: '<Root>/v' *)
    (* '<S1>:1:41' v = v_0 - (slopeExt/t1)*(t-t0); *)
    v := v_0 - (x1_tmp * a_tmp);
ELSIF (t >= a_tmp_tmp) AND (t < a_tmp_tmp_0) THEN 
    (* Outport: '<Root>/x' *)
    (* '<S1>:1:42' elseif t >=(t0+t1) && t < (t0+t1+t2) *)
    (* '<S1>:1:43' x = x1 + vs*(t-(t0+t1)); *)
    x := ((t - a_tmp_tmp) * v_ref) + x1;
    (* Outport: '<Root>/v' *)
    (* '<S1>:1:44' v = vs; *)
    v := v_ref;
ELSIF (t >= a_tmp_tmp_0) AND (t < a_tmp_tmp_1) THEN 
    (* '<S1>:1:45' elseif t>=(t0+t1+t2) && t<(t0+t1+t2+t3) *)
    (* '<S1>:1:46' x = x2 + vs*(t-(t0+t1+t2)) + (slopeExt/t3)*(t-(t0+t1+t2))^2/2; *)
    a_tmp := t - a_tmp_tmp_0;
    (* Outport: '<Root>/x' *)
    x := ((((a_tmp_tmp_0 - a_tmp_tmp) * v_ref) + x1) + (a_tmp * v_ref)) + ((x1_tmp * (a_tmp * a_tmp)) / 2.0);
    (* Outport: '<Root>/v' *)
    (* '<S1>:1:47' v = vs + (slopeExt/t3)*(t-(t0+t1+t2)); *)
    v := (a_tmp * x1_tmp) + v_ref;
ELSIF (t >= a_tmp_tmp_1) AND (t < a_tmp) THEN 
    (* Outport: '<Root>/x' *)
    (* '<S1>:1:48' elseif t >=(t0+t1+t2+t3) && t<(t0+t1+t2+t3+t4) *)
    (* '<S1>:1:49' x = x_ref; *)
    x := x_ref;
    (* Outport: '<Root>/v' *)
    (* '<S1>:1:50' v = v_0; *)
    v := v_0;
ELSIF (t >= a_tmp) AND (t < a_tmp_tmp_2) THEN 
    (* '<S1>:1:51' elseif t>=(t0+t1+t2+t3+t4) && t < (t0+t1+t2+t3+t4+t5) *)
    (* '<S1>:1:52' x = x_ref - v_0*(t-(t0+t1+t2+t3+t4))+(slopeRetr/t5)*(t-(t0+t1+t2+t3+t4))^2/2; *)
    a_tmp := t - a_tmp;
    (* Outport: '<Root>/x' *)
    x := (x_ref - (a_tmp * v_0)) + ((x4_tmp * (a_tmp * a_tmp)) / 2.0);
    (* Outport: '<Root>/v' *)
    (* '<S1>:1:53' v = v_0 + (slopeRetr/t5)*(t-(t0+t1+t2+t3+t4)); *)
    v := (a_tmp * x4_tmp) + v_0;
ELSE 
    x1_tmp := a_tmp_tmp_2 + tHold;

    IF (t >= a_tmp_tmp_2) AND (t < x1_tmp) THEN 
        (* Outport: '<Root>/x' *)
        (* '<S1>:1:54' elseif t>=(t0+t1+t2+t3+t4+t5) && t < (t0+t1+t2+t3+t4+t5+t6) *)
        (* '<S1>:1:55' x = x4 - vs*(t-(t0+t1+t2+t3+t4+t5)); *)
        x := x4 - ((t - a_tmp_tmp_2) * v_ref);
        (* Outport: '<Root>/v' *)
        (* '<S1>:1:56' v = -vs; *)
        v :=  -v_ref;
    ELSIF (t >= x1_tmp) AND (t < (x1_tmp + tRamp)) THEN 
        (* '<S1>:1:57' elseif t >= (t0+t1+t2+t3+t4+t5+t6) && t < (t0+t1+t2+t3+t4+t5+t6+t7) *)
        (* '<S1>:1:58' x = x5 - vs*(t-(t0+t1+t2+t3+t4+t5+t6)) - (slopeRetr/t3)*(t-(t0+t1+t2+t3+t4+t5+t6))^2/2; *)
        a_tmp := t - x1_tmp;
        (* Outport: '<Root>/x' *)
        x := ((x4 - ((x1_tmp - a_tmp_tmp_2) * v_ref)) - (a_tmp * v_ref)) - ((x4_tmp * (a_tmp * a_tmp)) / 2.0);
        (* Outport: '<Root>/v' *)
        (* '<S1>:1:59' v = -vs-(slopeRetr/t3)*(t-(t0+t1+t2+t3+t4+t5+t6)); *)
        v := ( -v_ref) - (a_tmp * x4_tmp);
    ELSE 
        (* Outport: '<Root>/x' *)
        (* '<S1>:1:60' else *)
        (* '<S1>:1:61' x = x0; *)
        x := x0;
        (* Outport: '<Root>/v' *)
        (* '<S1>:1:62' v = v_0; *)
        v := v_0;
    END_IF;

END_IF;

(* Outport: '<Root>/Error' incorporates:
 *  MATLAB Function: '<Root>/Path_signal_gen' *)
Error := DINT_TO_LREAL(Error_0);

]]></xhtml>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations/>
  </instances>
</project>
