<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_WinchControl" Id="{afefc06e-bd78-485d-a26b-89efa2ded290}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_WinchControl
VAR_INPUT
	bWinch : BOOL := ST_Enabeling.bWinchEnable;
	bPosCtrl : BOOL := ST_Enabeling.bPosEnable;
	bVelCtrl : BOOL := ST_Enabeling.bVelEnable;
END_VAR

VAR_OUTPUT
	fGeneratedPath : REAL;
	fPosCtrlSignal : REAL;
	fVelCtrlSignal : REAL; 
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[fGeneratedPath := MotionGenerator()]]></ST>
    </Implementation>
    <Method Name="MotionGenerator" Id="{2c866856-81da-4d19-b69b-e7449cfd03ed}">
      <Declaration><![CDATA[METHOD MotionGenerator : REAL
VAR_INPUT
	x0: LREAL;
	v_0: LREAL;
	x_ref: LREAL;
	v_ref: LREAL;
	t0: LREAL;
	tRamp: LREAL;
	tWait: LREAL;
	t: LREAL;
END_VAR
VAR_OUTPUT
	x: LREAL;
	v: LREAL;
	Error: LREAL;
END_VAR
VAR
	Error_0: DINT;
	tHold: LREAL;
	x1: LREAL;
	x4: LREAL;
	a_tmp: LREAL;
	a_tmp_tmp: LREAL;
	a_tmp_0: LREAL;
	a_tmp_tmp_0: LREAL;
	a_tmp_tmp_1: LREAL;
	a_tmp_tmp_2: LREAL;
	x1_tmp: LREAL;
	x4_tmp: LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* MATLAB Function: '<Root>/Path_signal_gen' *)
(* MATLAB Function 'Path_signal_gen': '<S1>:1' *)
(* '<S1>:1:3' x_SetPoint = x_ref - x0; *)
(* '<S1>:1:4' vs = v_ref; *)
(* '<S1>:1:5' slopeExt = v_0-vs; *)
(* '<S1>:1:6' slopeRetr = -vs-v_0; *)
(* '<S1>:1:8' as = vs/tRamp; *)
(* Find acceleration *)
(* '<S1>:1:9' s_acc = (vs^2-v_0^2)/as; *)
(* Acceleration sp *)
(* '<S1>:1:11' tHold = (x_SetPoint-s_acc)/vs; *)
tHold := ((x_ref - x0) - (((v_ref * v_ref) - (v_0 * v_0)) / (v_ref / tRamp))) / v_ref;
(* '<S1>:1:13' if tHold < 0 *)

IF tHold < 0.0 THEN 
    (* '<S1>:1:14' Error = 1; *)
    Error_0 := 1;
ELSE 
    (* '<S1>:1:15' else *)
    (* '<S1>:1:16' Error = 0; *)
    Error_0 := 0;
END_IF;

(* '<S1>:1:19' t1 = tRamp; *)
(* '<S1>:1:20' t2 = tHold; *)
(* '<S1>:1:21' t3 = tRamp; *)
(* '<S1>:1:22' t4 = tWait; *)
(* '<S1>:1:23' t5 = t1; *)
(* '<S1>:1:24' t6 = t2; *)
(* '<S1>:1:25' t7 = t3; *)
(* Ramp Equations: *)
(* '<S1>:1:28' x1 = x0 + v_0*((t0+t1)-t0) - (slopeExt/t1)*((t0+t1)-t0)^2/2; *)
a_tmp_tmp := t0 + tRamp;
a_tmp := a_tmp_tmp - t0;
x1_tmp := (v_0 - v_ref) / tRamp;
x1 := ((a_tmp * v_0) + x0) - ((x1_tmp * (a_tmp * a_tmp)) / 2.0);
(* '<S1>:1:29' x2 = x1 + vs * ((t0+t1+t2)-(t0+t1)); *)
(* '<S1>:1:30' x4 = x_ref - v_0 * ((t0+t1+t2+t3+t4+t5)-(t0+t1+t2+t3+t4)) + (slopeRetr/t5)*((t0+t1+t2+t3+t4+t5)-(t0+t1+t2+t3+t4))^2/2; *)
a_tmp_tmp_0 := a_tmp_tmp + tHold;
a_tmp_tmp_1 := a_tmp_tmp_0 + tRamp;
a_tmp := a_tmp_tmp_1 + tWait;
a_tmp_tmp_2 := a_tmp + tRamp;
a_tmp_0 := a_tmp_tmp_2 - a_tmp;
x4_tmp := (( -v_ref) - v_0) / tRamp;
x4 := (x_ref - (a_tmp_0 * v_0)) + ((x4_tmp * (a_tmp_0 * a_tmp_0)) / 2.0);
(* '<S1>:1:31' x5 = x4 - vs*((t0+t1+t2+t3+t4+t5+t6)-(t0+t1+t2+t3+t4+t5)); *)
(* '<S1>:1:33' if Error == 1 *)

IF Error_0 = 1 THEN 
    (* Outport: '<Root>/x' *)
    (* '<S1>:1:34' x = x0; *)
    x := x0;
    (* Outport: '<Root>/v' *)
    (* '<S1>:1:35' v = v_0; *)
    v := v_0;
ELSIF (t >= 0.0) AND (t < t0) THEN 
    (* Outport: '<Root>/x' *)
    (* '<S1>:1:36' elseif t >= 0 && t<t0 *)
    (* '<S1>:1:37' x = x0; *)
    x := x0;
    (* Outport: '<Root>/v' *)
    (* '<S1>:1:38' v = v_0; *)
    v := v_0;
ELSIF (t >= t0) AND (t < a_tmp_tmp) THEN 
    (* '<S1>:1:39' elseif t >= t0 && t < (t0+t1) *)
    (* '<S1>:1:40' x = x0 + v_0*(t-t0) - (slopeExt/t1)*(t-t0)^2/2; *)
    a_tmp := t - t0;
    (* Outport: '<Root>/x' *)
    x := ((a_tmp * v_0) + x0) - ((x1_tmp * (a_tmp * a_tmp)) / 2.0);
    (* Outport: '<Root>/v' *)
    (* '<S1>:1:41' v = v_0 - (slopeExt/t1)*(t-t0); *)
    v := v_0 - (x1_tmp * a_tmp);
ELSIF (t >= a_tmp_tmp) AND (t < a_tmp_tmp_0) THEN 
    (* Outport: '<Root>/x' *)
    (* '<S1>:1:42' elseif t >=(t0+t1) && t < (t0+t1+t2) *)
    (* '<S1>:1:43' x = x1 + vs*(t-(t0+t1)); *)
    x := ((t - a_tmp_tmp) * v_ref) + x1;
    (* Outport: '<Root>/v' *)
    (* '<S1>:1:44' v = vs; *)
    v := v_ref;
ELSIF (t >= a_tmp_tmp_0) AND (t < a_tmp_tmp_1) THEN 
    (* '<S1>:1:45' elseif t>=(t0+t1+t2) && t<(t0+t1+t2+t3) *)
    (* '<S1>:1:46' x = x2 + vs*(t-(t0+t1+t2)) + (slopeExt/t3)*(t-(t0+t1+t2))^2/2; *)
    a_tmp := t - a_tmp_tmp_0;
    (* Outport: '<Root>/x' *)
    x := ((((a_tmp_tmp_0 - a_tmp_tmp) * v_ref) + x1) + (a_tmp * v_ref)) + ((x1_tmp * (a_tmp * a_tmp)) / 2.0);
    (* Outport: '<Root>/v' *)
    (* '<S1>:1:47' v = vs + (slopeExt/t3)*(t-(t0+t1+t2)); *)
    v := (a_tmp * x1_tmp) + v_ref;
ELSIF (t >= a_tmp_tmp_1) AND (t < a_tmp) THEN 
    (* Outport: '<Root>/x' *)
    (* '<S1>:1:48' elseif t >=(t0+t1+t2+t3) && t<(t0+t1+t2+t3+t4) *)
    (* '<S1>:1:49' x = x_ref; *)
    x := x_ref;
    (* Outport: '<Root>/v' *)
    (* '<S1>:1:50' v = v_0; *)
    v := v_0;
ELSIF (t >= a_tmp) AND (t < a_tmp_tmp_2) THEN 
    (* '<S1>:1:51' elseif t>=(t0+t1+t2+t3+t4) && t < (t0+t1+t2+t3+t4+t5) *)
    (* '<S1>:1:52' x = x_ref - v_0*(t-(t0+t1+t2+t3+t4))+(slopeRetr/t5)*(t-(t0+t1+t2+t3+t4))^2/2; *)
    a_tmp := t - a_tmp;
    (* Outport: '<Root>/x' *)
    x := (x_ref - (a_tmp * v_0)) + ((x4_tmp * (a_tmp * a_tmp)) / 2.0);
    (* Outport: '<Root>/v' *)
    (* '<S1>:1:53' v = v_0 + (slopeRetr/t5)*(t-(t0+t1+t2+t3+t4)); *)
    v := (a_tmp * x4_tmp) + v_0;
ELSE 
    x1_tmp := a_tmp_tmp_2 + tHold;

    IF (t >= a_tmp_tmp_2) AND (t < x1_tmp) THEN 
        (* Outport: '<Root>/x' *)
        (* '<S1>:1:54' elseif t>=(t0+t1+t2+t3+t4+t5) && t < (t0+t1+t2+t3+t4+t5+t6) *)
        (* '<S1>:1:55' x = x4 - vs*(t-(t0+t1+t2+t3+t4+t5)); *)
        x := x4 - ((t - a_tmp_tmp_2) * v_ref);
        (* Outport: '<Root>/v' *)
        (* '<S1>:1:56' v = -vs; *)
        v :=  -v_ref;
    ELSIF (t >= x1_tmp) AND (t < (x1_tmp + tRamp)) THEN 
        (* '<S1>:1:57' elseif t >= (t0+t1+t2+t3+t4+t5+t6) && t < (t0+t1+t2+t3+t4+t5+t6+t7) *)
        (* '<S1>:1:58' x = x5 - vs*(t-(t0+t1+t2+t3+t4+t5+t6)) - (slopeRetr/t3)*(t-(t0+t1+t2+t3+t4+t5+t6))^2/2; *)
        a_tmp := t - x1_tmp;
        (* Outport: '<Root>/x' *)
        x := ((x4 - ((x1_tmp - a_tmp_tmp_2) * v_ref)) - (a_tmp * v_ref)) - ((x4_tmp * (a_tmp * a_tmp)) / 2.0);
        (* Outport: '<Root>/v' *)
        (* '<S1>:1:59' v = -vs-(slopeRetr/t3)*(t-(t0+t1+t2+t3+t4+t5+t6)); *)
        v := ( -v_ref) - (a_tmp * x4_tmp);
    ELSE 
        (* Outport: '<Root>/x' *)
        (* '<S1>:1:60' else *)
        (* '<S1>:1:61' x = x0; *)
        x := x0;
        (* Outport: '<Root>/v' *)
        (* '<S1>:1:62' v = v_0; *)
        v := v_0;
    END_IF;

END_IF;

(* Outport: '<Root>/Error' incorporates:
 *  MATLAB Function: '<Root>/Path_signal_gen' *)
Error := DINT_TO_LREAL(Error_0);]]></ST>
      </Implementation>
    </Method>
    <Method Name="PosControl" Id="{92c21e71-f1d8-4199-9686-e56bdc054292}">
      <Declaration><![CDATA[METHOD PosControl : REAL
VAR_INPUT
	Enable: LREAL;
	KpGain: LREAL;
	PosRef: LREAL;
	Pos_feedback: LREAL;
END_VAR
VAR_OUTPUT
	Ctrl_signal_Pos: LREAL;
	PosErr: LREAL;
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Outputs for Atomic SubSystem: '<Root>/Closed-loop PosCtrl (Auto)' *)
(* Sum: '<S1>/Sum' *)
PosErr := PosRef - Pos_feedback;
(* Product: '<S1>/Product' *)
Ctrl_signal_Pos := KpGain * PosErr;
(* Saturate: '<S1>/Predefined Saturation' *)

IF Ctrl_signal_Pos > 1.0 THEN 
    Ctrl_signal_Pos := 1.0;
ELSIF Ctrl_signal_Pos < -1.0 THEN 
    Ctrl_signal_Pos := -1.0;
END_IF;

(* End of Saturate: '<S1>/Predefined Saturation' *)


(* Switch: '<S1>/Switch' *)

IF Enable <= 0.0 THEN 
    (* Outport: '<Root>/Ctrl_signal_Pos' incorporates:
     *  Constant: '<S1>/Constant' *)
    Ctrl_signal_Pos := 0.0;
END_IF;

(* End of Switch: '<S1>/Switch' *)
(* End of Outputs for SubSystem: '<Root>/Closed-loop PosCtrl (Auto)' *)]]></ST>
      </Implementation>
    </Method>
    <Method Name="VelControl" Id="{967a1153-9732-4ccc-b35a-3187adf9df9f}">
      <Declaration><![CDATA[METHOD VelControl : REAL
VAR_INPUT
	vel_refms: LREAL;
	Enable_Signal: LREAL;
	QMax_refLMIN: LREAL;
END_VAR
VAR_OUTPUT
	Ctrl_signalms: LREAL;
END_VAR
VAR
	rtb_Switch: LREAL;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Outputs for Atomic SubSystem: '<Root>/Open-loop VelControl (Manual)' *)
(* Switch: '<S1>/Switch' incorporates:
 *  Constant: '<S1>/Annulus_Area'
 *  Constant: '<S1>/Boreside_Area'
 *  Product: '<S1>/Product'
 *  Product: '<S1>/Product1' *)

IF vel_refms > 0.0 THEN 
    rtb_Switch := 0.0033183 * vel_refms;
ELSE 
    rtb_Switch := vel_refms * 0.0023562;
END_IF;

(* End of Switch: '<S1>/Switch' *)


(* Switch: '<S1>/Switch1' incorporates:
 *  Constant: '<S1>/Constant'
 *  Gain: '<S1>/UnitConv'
 *  Product: '<S1>/Divide' *)

IF Enable_Signal > 0.0 THEN 
    Ctrl_signalms := (60000.0 * rtb_Switch) / QMax_refLMIN;
ELSE 
    Ctrl_signalms := 0.0;
END_IF;

(* End of Switch: '<S1>/Switch1' *)


(* Saturate: '<S1>/Saturation' *)

IF Ctrl_signalms > 0.05 THEN 
    (* Outport: '<Root>/Ctrl_signal(m//s)' *)
    Ctrl_signalms := 0.05;
ELSIF Ctrl_signalms < -0.05 THEN 
    (* Outport: '<Root>/Ctrl_signal(m//s)' *)
    Ctrl_signalms := -0.05;
END_IF;

(* End of Saturate: '<S1>/Saturation' *)
(* End of Outputs for SubSystem: '<Root>/Open-loop VelControl (Manual)' *)]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>